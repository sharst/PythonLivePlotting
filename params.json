{"name":"PythonLivePlotting","tagline":"Collection of functions that makes live plotting of data in matplotlib a breeze","body":"# PythonLivePlotting\r\nCollection of functions that makes live plotting of data in matplotlib a breeze\r\n\r\n## Scope\r\nI have found that I'm rewriting the same code over and over again when trying to easily visualize a stream of data in matplotlib. That's why I've decided to rewrite it piece by piece into a coherent library.\r\nThis set of functions was not written with the intent to be applicable to every situation out there, but rather to solve the specific problems I have been encountering personally. By releasing it, I simply hope that the code will help in it's current state. \r\n\r\nThat being said, if you think that some specific enhancement would be especially cool, don't hesitate to file an enhancement request or (even better!) a pull request. \r\n\r\nFor the time being, I've only included the little amount of functions I currently need.\r\n[[my internal link|internal-ref]]\r\n## Prerequisites\r\n* Python 2.7 (other versions not tested)\r\n* matplotlib\r\n* numpy\r\n\r\n## Installation\r\nCurrently, this is just a collection of classes in one file. To use, download the file and put it in the directory that you want to use it in, or somewhere on your PYTHONPATH.[[my internal link|internal-ref]]\r\n\r\nThis library is maintained and tested in python 2.7 with matplotlib 1.3.1.\r\n\r\n## Simple example\r\nA simple example is already given in plot.py. Try the following (e.g. from the python command line):\r\n```     \r\nfrom plot import *\r\nimport random\r\n\r\nfig = Figure(10)                        # Create a new figure with an x-axis-length of 10 seconds\r\n    \r\nlp = LinePlot(fig, history=10)          # Add a LinePlot to that figure, keep data of the last 10 seconds stored\r\nvl = VerticalLines(fig, color='r')      # Add some red vertical lines to the figure\r\n   \r\nwhile True:\r\n    lp.add_value(random.random())       # update the line plot with random numbers\r\n    if random.random() > .9:\r\n        vl.add_value()                  # in 1 out of 10 cases, add a vertical line at the current time\r\n    fig.refresh()                       # redraw the figure\r\n    time.sleep(.1)                      # wait some time\r\n    \r\n```\r\n\r\n![Sample output](https://github.com/sharst/PythonLivePlotting/blob/master/animation.gif)\r\n\r\n## Planned enhancements\r\n* Enable color, style and linewidth arguments for all plotting elements\r\n* add histogram plot element\r\n* auto-scale plot data history to figure size\r\n\r\n[[my internal link|internal-ref]]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}